// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Printer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.tansadio.monmp3.Mp3;

public final class LecteurMp3PrxHelper extends Ice.ObjectPrxHelperBase implements LecteurMp3Prx
{
    private static final String __getFilemp3_name = "getFilemp3";

    public String[] getFilemp3()
    {
        return getFilemp3(null, false);
    }

    public String[] getFilemp3(java.util.Map<String, String> __ctx)
    {
        return getFilemp3(__ctx, true);
    }

    private String[] getFilemp3(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFilemp3", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFilemp3");
                    __delBase = __getDelegate(false);
                    _LecteurMp3Del __del = (_LecteurMp3Del)__delBase;
                    return __del.getFilemp3(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFilemp3()
    {
        return begin_getFilemp3(null, false, null);
    }

    public Ice.AsyncResult begin_getFilemp3(java.util.Map<String, String> __ctx)
    {
        return begin_getFilemp3(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFilemp3(Ice.Callback __cb)
    {
        return begin_getFilemp3(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFilemp3(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFilemp3(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFilemp3(Callback_LecteurMp3_getFilemp3 __cb)
    {
        return begin_getFilemp3(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFilemp3(java.util.Map<String, String> __ctx, Callback_LecteurMp3_getFilemp3 __cb)
    {
        return begin_getFilemp3(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFilemp3(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFilemp3_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFilemp3_name, __cb);
        try
        {
            __result.__prepare(__getFilemp3_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getFilemp3(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFilemp3_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = ItemMusicSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __jouer_name = "jouer";

    public String jouer()
    {
        return jouer(null, false);
    }

    public String jouer(java.util.Map<String, String> __ctx)
    {
        return jouer(__ctx, true);
    }

    private String jouer(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "jouer", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("jouer");
                    __delBase = __getDelegate(false);
                    _LecteurMp3Del __del = (_LecteurMp3Del)__delBase;
                    return __del.jouer(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_jouer()
    {
        return begin_jouer(null, false, null);
    }

    public Ice.AsyncResult begin_jouer(java.util.Map<String, String> __ctx)
    {
        return begin_jouer(__ctx, true, null);
    }

    public Ice.AsyncResult begin_jouer(Ice.Callback __cb)
    {
        return begin_jouer(null, false, __cb);
    }

    public Ice.AsyncResult begin_jouer(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_jouer(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_jouer(Callback_LecteurMp3_jouer __cb)
    {
        return begin_jouer(null, false, __cb);
    }

    public Ice.AsyncResult begin_jouer(java.util.Map<String, String> __ctx, Callback_LecteurMp3_jouer __cb)
    {
        return begin_jouer(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_jouer(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__jouer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __jouer_name, __cb);
        try
        {
            __result.__prepare(__jouer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_jouer(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __jouer_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __pause_name = "pause";

    public String pause()
    {
        return pause(null, false);
    }

    public String pause(java.util.Map<String, String> __ctx)
    {
        return pause(__ctx, true);
    }

    private String pause(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "pause", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("pause");
                    __delBase = __getDelegate(false);
                    _LecteurMp3Del __del = (_LecteurMp3Del)__delBase;
                    return __del.pause(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_pause()
    {
        return begin_pause(null, false, null);
    }

    public Ice.AsyncResult begin_pause(java.util.Map<String, String> __ctx)
    {
        return begin_pause(__ctx, true, null);
    }

    public Ice.AsyncResult begin_pause(Ice.Callback __cb)
    {
        return begin_pause(null, false, __cb);
    }

    public Ice.AsyncResult begin_pause(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_pause(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_pause(Callback_LecteurMp3_pause __cb)
    {
        return begin_pause(null, false, __cb);
    }

    public Ice.AsyncResult begin_pause(java.util.Map<String, String> __ctx, Callback_LecteurMp3_pause __cb)
    {
        return begin_pause(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_pause(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__pause_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __pause_name, __cb);
        try
        {
            __result.__prepare(__pause_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_pause(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __pause_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __selectedMusic_name = "selectedMusic";

    public void selectedMusic(String name)
    {
        selectedMusic(name, null, false);
    }

    public void selectedMusic(String name, java.util.Map<String, String> __ctx)
    {
        selectedMusic(name, __ctx, true);
    }

    private void selectedMusic(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectedMusic", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _LecteurMp3Del __del = (_LecteurMp3Del)__delBase;
                    __del.selectedMusic(name, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectedMusic(String name)
    {
        return begin_selectedMusic(name, null, false, null);
    }

    public Ice.AsyncResult begin_selectedMusic(String name, java.util.Map<String, String> __ctx)
    {
        return begin_selectedMusic(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectedMusic(String name, Ice.Callback __cb)
    {
        return begin_selectedMusic(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectedMusic(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectedMusic(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectedMusic(String name, Callback_LecteurMp3_selectedMusic __cb)
    {
        return begin_selectedMusic(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectedMusic(String name, java.util.Map<String, String> __ctx, Callback_LecteurMp3_selectedMusic __cb)
    {
        return begin_selectedMusic(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectedMusic(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectedMusic_name, __cb);
        try
        {
            __result.__prepare(__selectedMusic_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_selectedMusic(Ice.AsyncResult __result)
    {
        __end(__result, __selectedMusic_name);
    }

    private static final String __stop_name = "stop";

    public void stop()
    {
        stop(null, false);
    }

    public void stop(java.util.Map<String, String> __ctx)
    {
        stop(__ctx, true);
    }

    private void stop(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "stop", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _LecteurMp3Del __del = (_LecteurMp3Del)__delBase;
                    __del.stop(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_stop()
    {
        return begin_stop(null, false, null);
    }

    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx)
    {
        return begin_stop(__ctx, true, null);
    }

    public Ice.AsyncResult begin_stop(Ice.Callback __cb)
    {
        return begin_stop(null, false, __cb);
    }

    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stop(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stop(Callback_LecteurMp3_stop __cb)
    {
        return begin_stop(null, false, __cb);
    }

    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Callback_LecteurMp3_stop __cb)
    {
        return begin_stop(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stop_name, __cb);
        try
        {
            __result.__prepare(__stop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_stop(Ice.AsyncResult __result)
    {
        __end(__result, __stop_name);
    }

    public static LecteurMp3Prx checkedCast(Ice.ObjectPrx __obj)
    {
        LecteurMp3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LecteurMp3Prx)
            {
                __d = (LecteurMp3Prx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    LecteurMp3PrxHelper __h = new LecteurMp3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LecteurMp3Prx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        LecteurMp3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LecteurMp3Prx)
            {
                __d = (LecteurMp3Prx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    LecteurMp3PrxHelper __h = new LecteurMp3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static LecteurMp3Prx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LecteurMp3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    LecteurMp3PrxHelper __h = new LecteurMp3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LecteurMp3Prx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        LecteurMp3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    LecteurMp3PrxHelper __h = new LecteurMp3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static LecteurMp3Prx uncheckedCast(Ice.ObjectPrx __obj)
    {
        LecteurMp3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof LecteurMp3Prx)
            {
                __d = (LecteurMp3Prx)__obj;
            }
            else
            {
                LecteurMp3PrxHelper __h = new LecteurMp3PrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static LecteurMp3Prx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        LecteurMp3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            LecteurMp3PrxHelper __h = new LecteurMp3PrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Mp3::LecteurMp3"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _LecteurMp3DelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _LecteurMp3DelD();
    }

    public static void __write(IceInternal.BasicStream __os, LecteurMp3Prx v)
    {
        __os.writeProxy(v);
    }

    public static LecteurMp3Prx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LecteurMp3PrxHelper result = new LecteurMp3PrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
